#pragma kernel ParticleSystemKernel

#include "ParticleSystemCommon.cginc"

//We define the size of a group in the x and y directions, z direction will just be one
#define thread_group_size_x 16
#define thread_group_size_y 16


//We keep three buffers accessed by the kernel, a constant buffer that is the same for every computation,
//an offset buffer with a value to offset the wave, and an output buffer that is written to by the kernel
Texture2D<float4> colorByLife;
Texture2D<float4> colorByVelocity;
RWStructuredBuffer<ParticleStruct> output;

float dt;
float mass;
float momentum;
int emission;
float4 startColor;
float velocityColorRange;
float4 origin;

const float cellSize = 1.25;


//The kernel for this compute shader, each thread group contains a number of threads specified by numthreads(x,y,z)
//We lookup the the index into the flat array by using x + y * x_stride
//The position is calculated from the thread index and then the z component is shifted by the Wave function
[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void ParticleSystemKernel(uint3 id : SV_DispatchThreadID)
{
	int idx = id.x + id.y * thread_group_size_x * 32;

	float3 pos = output[idx].pos;
	float3 vel = output[idx].vel;
	float4 cd = output[idx].cd;
	float age = output[idx].age;

	float3 velIn = float3(0.0, -9.0, 0.0);


	float r1 = rand(float2(id.x+.1, id.y));
	float r2 = rand(float2(id.x+.2, id.y));
	float r3 = rand(float2(id.x+.2, id.y));
	float3 randSphere = randomSpherePoint(float3(rand(float2(id.x,id.y)), 
												rand(float2(id.x,id.y+0.2)), 
												rand(float2(id.x,id.y+0.3))));
	
	vel = velIn * (mass * dt) + vel * momentum * r2;

	pos += vel;
	
	float ageClamp = clamp(age, 0.0, 1.0);
	uint2 ageId = uint2(1024-(ageClamp*1023), 0);

	float speed = length(vel);
	uint2 magId = uint2(fit(speed, 0., velocityColorRange, 0., 1024.), 0);
	cd = startColor * colorByLife[ageId] * colorByVelocity[magId];

	age -= dt;

	if (age <= 0.0) {
		if (idx < emission) {

			pos = origin.xyz + (randSphere * .25);
			
			vel = randSphere;

			// age = 1.0 * (r + .25);
			age = 1.0 + (r1 * .25);
		}

		else {
			pos = randSphere * 1000000;
			vel = float3(0,0,0);
			cd = float4(0,0,0,0);
			age = 0.0;
		}

	}


	output[idx].pos = pos;
	output[idx].vel = vel;
	output[idx].cd = cd;
	output[idx].age = age;
}